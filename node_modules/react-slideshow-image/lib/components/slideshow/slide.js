"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var TWEEN = _interopRequireWildcard(require("@tweenjs/tween.js"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _helpers = require("../../helpers.js");

require("./slide.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class Slideshow extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      index: 0
    };
    this.width = 0;
    this.imageContainer = null;
    this.timeout = null;
    this.moveSlides = this.moveSlides.bind(this);
    this.resizeListener = this.resizeListener.bind(this);
    this.goToSlide = this.goToSlide.bind(this);
  }

  componentDidMount() {
    this.setWidth();
    window.addEventListener('resize', this.resizeListener);
    const {
      autoplay,
      duration
    } = this.props;

    if (autoplay) {
      this.timeout = setTimeout(() => this.goNext(), duration);
    }
  }

  componentWillUnmount() {
    this.willUnmount = true;
    clearTimeout(this.timeout);
    window.removeEventListener('resize', this.resizeListener);
  }

  setWidth() {
    // the .slice.call was needed to support ie11
    this.allImages = Array.prototype.slice.call(document.querySelectorAll(`.images-wrap > div`), 0);
    this.width = document.querySelector('.react-slideshow-wrapper').clientWidth;
    const fullwidth = this.width * (this.props.children.length + 2);
    this.imageContainer.style.width = `${fullwidth}px`;
    this.imageContainer.style.transform = `translate(-${this.width * (this.state.index + 1)}px)`;
    this.applySlideStyle();
  }

  componentDidUpdate(props) {
    if (this.props.children.length != props.children.length) {
      this.setWidth();
    }
  }

  resizeListener() {
    this.width = document.querySelector('.react-slideshow-wrapper').clientWidth;
    this.setWidth();
  }

  applySlideStyle() {
    this.allImages.forEach((eachImage, index) => {
      eachImage.style.width = `${this.width}px`;
    });
  }

  moveSlides({
    currentTarget: {
      dataset
    }
  }) {
    if (dataset.type === 'next') {
      this.goNext();
    } else {
      this.goBack();
    }
  }

  goToSlide({
    target
  }) {
    this.goTo(parseInt(target.dataset.key));
  }

  goTo(index) {
    this.slideImages(index);
  }

  goNext() {
    const {
      index
    } = this.state;
    const {
      children,
      infinite
    } = this.props;

    if (!infinite && index === children.length - 1) {
      return;
    }

    this.slideImages(index + 1);
  }

  goBack() {
    const {
      index
    } = this.state;
    const {
      infinite
    } = this.props;

    if (!infinite && index === 0) {
      return;
    }

    this.slideImages(index - 1);
  }

  render() {
    const {
      children,
      infinite,
      indicators,
      arrows
    } = this.props;
    const unhandledProps = (0, _helpers.getUnhandledProps)(Slideshow.propTypes, this.props);
    const {
      index
    } = this.state;
    const style = {
      transform: `translate(-${(index + 1) * this.width}px)`
    };
    return _react.default.createElement("div", unhandledProps, _react.default.createElement("div", {
      className: "react-slideshow-container"
    }, arrows && _react.default.createElement("div", {
      className: `nav ${index <= 0 && !infinite ? 'disabled' : ''}`,
      "data-type": "prev",
      onClick: this.moveSlides
    }, _react.default.createElement("span", null)), _react.default.createElement("div", {
      className: `react-slideshow-wrapper slide`
    }, _react.default.createElement("div", {
      className: "images-wrap",
      style: style,
      ref: wrap => this.imageContainer = wrap
    }, _react.default.createElement("div", {
      "data-index": "-1"
    }, children[children.length - 1]), children.map((each, key) => _react.default.createElement("div", {
      "data-index": key,
      key: key,
      className: key === index ? 'active' : ''
    }, each)), _react.default.createElement("div", {
      "data-index": "-1"
    }, children[0]))), arrows && _react.default.createElement("div", {
      className: `nav ${index === children.length - 1 && !infinite ? 'disabled' : ''}`,
      "data-type": "next",
      onClick: this.moveSlides
    }, _react.default.createElement("span", null))), indicators && _react.default.createElement("div", {
      className: "indicators"
    }, children.map((each, key) => _react.default.createElement("div", {
      key: key,
      "data-key": key,
      className: index === key ? 'active' : '',
      onClick: this.goToSlide
    }))));
  }

  slideImages(index) {
    let {
      children,
      transitionDuration,
      autoplay,
      infinite,
      duration,
      onChange
    } = this.props;
    const existingTweens = TWEEN.default.getAll();

    if (!existingTweens.length) {
      clearTimeout(this.timeout);
      const value = {
        margin: -this.width * (this.state.index + 1)
      };
      const tween = new TWEEN.Tween(value).to({
        margin: -this.width * (index + 1)
      }, transitionDuration).onUpdate(value => {
        this.imageContainer.style.transform = `translate(${value.margin}px)`;
      }).start();

      let animate = () => {
        if (this.willUnmount) {
          TWEEN.default.removeAll();
          return;
        }

        requestAnimationFrame(animate);
        TWEEN.default.update();
      };

      animate();
      tween.onComplete(() => {
        const newIndex = index < 0 ? children.length - 1 : index >= children.length ? 0 : index;

        if (this.willUnmount) {
          return;
        }

        if (typeof onChange === 'function') {
          onChange(this.state.index, newIndex);
        }

        this.setState({
          index: newIndex
        }, () => {
          if (autoplay && (infinite || this.state.index < children.length)) {
            this.timeout = setTimeout(() => this.goNext(), duration);
          }
        });
      });
    }
  }

}

Slideshow.defaultProps = {
  duration: 5000,
  transitionDuration: 1000,
  infinite: true,
  autoplay: true,
  indicators: false,
  arrows: true
};
Slideshow.propTypes = {
  duration: _propTypes.default.number,
  transitionDuration: _propTypes.default.number,
  infinite: _propTypes.default.bool,
  indicators: _propTypes.default.bool,
  autoplay: _propTypes.default.bool,
  arrows: _propTypes.default.bool,
  onChange: _propTypes.default.func
};
var _default = Slideshow;
exports.default = _default;