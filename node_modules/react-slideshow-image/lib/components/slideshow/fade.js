"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var TWEEN = _interopRequireWildcard(require("@tweenjs/tween.js"));

var _helpers = require("../../helpers.js");

require("./fade.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

class Fade extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      index: 0
    };
    this.width = 0;
    this.timeout = null;
    this.divsContainer = null;
    this.setWidth = this.setWidth.bind(this);
    this.resizeListener = this.resizeListener.bind(this);
    this.navigate = this.navigate.bind(this);
    this.preFade = this.preFade.bind(this);
  }

  componentDidMount() {
    window.addEventListener('resize', this.resizeListener);
    this.setWidth();
    this.play();
  }

  play() {
    const {
      autoplay,
      children
    } = this.props;
    const {
      index
    } = this.state;

    if (autoplay && children.length > 1) {
      clearTimeout(this.timeout);
      this.timeout = setTimeout(() => this.fadeImages(index + 1), this.props.duration);
    }
  }

  componentDidUpdate(props) {
    if (this.props.children.length != props.children.length) {
      this.applyStyle();
      this.play();
    }
  }

  componentWillUnmount() {
    this.willUnmount = true;
    clearTimeout(this.timeout);
    window.removeEventListener('resize', this.resizeListener);
  }

  setWidth() {
    this.width = document.querySelector('.react-slideshow-fade-wrapper').clientWidth;
    this.applyStyle();
  }

  resizeListener() {
    this.setWidth();
  }

  applyStyle() {
    const fullwidth = this.width * this.props.children.length;
    this.divsContainer.style.width = `${fullwidth}px`;

    for (let index = 0; index < this.divsContainer.children.length; index++) {
      const eachDiv = this.divsContainer.children[index];

      if (eachDiv) {
        eachDiv.style.width = `${this.width}px`;
        eachDiv.style.left = `${index * -this.width}px`;
      }
    }
  }

  goNext() {
    const {
      index
    } = this.state;
    const {
      children,
      infinite
    } = this.props;

    if (!infinite && index === children.length - 1) {
      return;
    }

    this.fadeImages((index + 1) % children.length);
  }

  goBack() {
    const {
      index
    } = this.state;
    const {
      children,
      infinite
    } = this.props;

    if (!infinite && index === 0) {
      return;
    }

    this.fadeImages(index === 0 ? children.length - 1 : index - 1);
  }

  navigate({
    target: {
      dataset
    }
  }) {
    if (dataset.key != this.state.index) {
      this.goTo(parseInt(dataset.key));
    }
  }

  goTo(index) {
    this.fadeImages(index);
  }

  preFade({
    currentTarget
  }) {
    if (currentTarget.dataset.type === 'prev') {
      this.goBack();
    } else {
      this.goNext();
    }
  }

  render() {
    const {
      indicators,
      arrows,
      infinite,
      children
    } = this.props;
    const {
      index
    } = this.state;
    const unhandledProps = (0, _helpers.getUnhandledProps)(Fade.propTypes, this.props);
    return _react.default.createElement("div", unhandledProps, _react.default.createElement("div", {
      className: "react-slideshow-container"
    }, arrows && _react.default.createElement("div", {
      className: `nav ${index <= 0 && !infinite ? 'disabled' : ''}`,
      "data-type": "prev",
      onClick: this.preFade
    }, _react.default.createElement("span", null)), _react.default.createElement("div", {
      className: "react-slideshow-fade-wrapper"
    }, _react.default.createElement("div", {
      className: "react-slideshow-fade-images-wrap",
      ref: wrap => this.divsContainer = wrap
    }, children.map((each, key) => _react.default.createElement("div", {
      style: {
        opacity: key === index ? '1' : '0',
        zIndex: key === index ? '1' : '0'
      },
      "data-index": key,
      key: key
    }, each)))), arrows && _react.default.createElement("div", {
      className: `nav ${index === children.length - 1 && !infinite ? 'disabled' : ''}`,
      "data-type": "next",
      onClick: this.preFade
    }, _react.default.createElement("span", null))), indicators && _react.default.createElement("div", {
      className: "indicators"
    }, children.map((each, key) => _react.default.createElement("div", {
      key: key,
      "data-key": key,
      className: index === key ? 'active' : '',
      onClick: this.navigate
    }))));
  }

  fadeImages(newIndex) {
    const {
      index
    } = this.state;
    const {
      autoplay,
      children,
      infinite,
      duration,
      transitionDuration,
      onChange
    } = this.props;

    if (!this.divsContainer.children[newIndex]) {
      newIndex = 0;
    }

    clearTimeout(this.timeout);
    const value = {
      opacity: 0
    };

    const animate = () => {
      if (this.willUnmount) {
        TWEEN.default.removeAll();
        return;
      }

      requestAnimationFrame(animate);
      TWEEN.default.update();
    };

    animate();
    const tween = new TWEEN.Tween(value).to({
      opacity: 1
    }, transitionDuration).onUpdate(value => {
      this.divsContainer.children[newIndex].style.opacity = value.opacity;
      this.divsContainer.children[index].style.opacity = 1 - value.opacity;
    }).start();
    tween.onComplete(() => {
      if (this.willUnmount) {
        return;
      }

      this.setState({
        index: newIndex
      });

      if (typeof onChange === 'function') {
        onChange(index, newIndex);
      }

      if (autoplay && (infinite || newIndex < children.length - 1)) {
        clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
          this.fadeImages((newIndex + 1) % children.length);
        }, duration);
      }
    });
  }

}

Fade.defaultProps = {
  duration: 5000,
  transitionDuration: 1000,
  indicators: false,
  arrows: true,
  autoplay: true,
  infinite: true
};
Fade.propTypes = {
  duration: _propTypes.default.number,
  transitionDuration: _propTypes.default.number,
  indicators: _propTypes.default.bool,
  arrows: _propTypes.default.bool,
  autoplay: _propTypes.default.bool,
  infinite: _propTypes.default.bool,
  onChange: _propTypes.default.func
};
var _default = Fade;
exports.default = _default;